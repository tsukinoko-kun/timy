// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const addTime = `-- name: AddTime :exec
INSERT INTO times (timespan, description, year, month, day_of_month) VALUES (?, ?, ?, ?, ?)
`

// AddTime
//
//	INSERT INTO times (timespan, description, year, month, day_of_month) VALUES (?, ?, ?, ?, ?)
func (q *Queries) AddTime(ctx context.Context, timespan string, description string, year int64, month int64, dayOfMonth int64) error {
	_, err := q.db.ExecContext(ctx, addTime,
		timespan,
		description,
		year,
		month,
		dayOfMonth,
	)
	return err
}

const getTimesYear = `-- name: GetTimesYear :many
SELECT timespan, description FROM times WHERE year = ?
`

type GetTimesYearRow struct {
	Timespan    string
	Description string
}

// GetTimesYear
//
//	SELECT timespan, description FROM times WHERE year = ?
func (q *Queries) GetTimesYear(ctx context.Context, year int64) ([]GetTimesYearRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimesYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimesYearRow
	for rows.Next() {
		var i GetTimesYearRow
		if err := rows.Scan(&i.Timespan, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimesYearMonth = `-- name: GetTimesYearMonth :many
SELECT timespan, description FROM times WHERE year = ? AND month = ?
`

type GetTimesYearMonthRow struct {
	Timespan    string
	Description string
}

// GetTimesYearMonth
//
//	SELECT timespan, description FROM times WHERE year = ? AND month = ?
func (q *Queries) GetTimesYearMonth(ctx context.Context, year int64, month int64) ([]GetTimesYearMonthRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimesYearMonth, year, month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimesYearMonthRow
	for rows.Next() {
		var i GetTimesYearMonthRow
		if err := rows.Scan(&i.Timespan, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimesYearMonthDay = `-- name: GetTimesYearMonthDay :many
SELECT timespan, description FROM times WHERE year = ? AND month = ? AND day_of_month = ?
`

type GetTimesYearMonthDayRow struct {
	Timespan    string
	Description string
}

// GetTimesYearMonthDay
//
//	SELECT timespan, description FROM times WHERE year = ? AND month = ? AND day_of_month = ?
func (q *Queries) GetTimesYearMonthDay(ctx context.Context, year int64, month int64, dayOfMonth int64) ([]GetTimesYearMonthDayRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimesYearMonthDay, year, month, dayOfMonth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimesYearMonthDayRow
	for rows.Next() {
		var i GetTimesYearMonthDayRow
		if err := rows.Scan(&i.Timespan, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
